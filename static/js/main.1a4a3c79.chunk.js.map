{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","rows","value","onChange","event","target","style","backgroundColor","newText","showAlert","toLocaleLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","App","setMode","_useState3","_useState4","setAlert","_useState5","_useState6","greyMode","setGreyMode","message","setTimeout","body","aboutText","toggleGreyMode","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"mMAEe,SAASA,EAAMC,GAO5B,OACEA,EAAMC,OAASC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAC,OAAiBN,EAAMC,MAAMM,KAA7B,gCAAiEC,KAAK,SAApF,MACXN,EAAAC,EAAAC,cAAA,cAPW,SAACK,GAChB,IAAMC,EAAQD,EAAKE,cACnB,OAAOD,EAAME,OAAO,GAAGC,cAAgBH,EAAMI,MAAM,GAKtCC,CAAWf,EAAMC,MAAMM,OADrB,KACuCP,EAAMC,MAAMe,KCJvD,SAASC,EAAOjB,GAC7B,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kCAAAC,OAAoCN,EAAMkB,KAA1C,QAAAZ,OAAqDN,EAAMkB,OACrEhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAIbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAec,KAAM,KAC/BnB,EAAMoB,OAETlB,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVE,KAAK,SACLc,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEXvB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BqB,GAAG,0BAC3CxB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAIZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBsB,eAAa,OAAOR,KAAM,KAAzD,SAIFjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAwDlBH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,oCAAAC,OAAoD,UAAdN,EAAMkB,KAAgB,OAAO,UAC7EhB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmBuB,QAAU5B,EAAM6B,WAAYtB,KAAK,WAAWC,KAAK,SAASkB,GAAG,2BACjGxB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBAAmByB,QAAQ,0BAA5C,UAA2F,UAAb9B,EAAMkB,KAAe,OAAO,QAA1G,YC3FC,SAASa,EAAS/B,GAC7B,IADoCgC,EAiCZC,mBAAS,KAjCGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAiC7BK,EAjC6BH,EAAA,GAiCvBI,EAjCuBJ,EAAA,GAkCtC,OACEhC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACArC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAC,OAA4B,UAAbN,EAAMkB,KAAe,OAAO,UACvDhB,EAAAC,EAAAC,cAAA,UAAKJ,EAAMwC,SACXtC,EAAAC,EAAAC,cAAA,YACEC,UAAS,qBAAAC,OAAoC,UAAbN,EAAMkB,KAAe,OAAO,SAC5DQ,GAAG,QACHe,KAAK,IACLC,MAASL,EACTM,SAhBgB,SAACC,GAEnBN,EAAQM,EAAMC,OAAOH,QAenBI,MAAO,CAACC,gBAA8B,SAAb/C,EAAMkB,KAAc,UAAU,YAG3DhB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBuB,QA/CrB,WAGlB,IAAIoB,EAAUX,EAAKxB,cACnByB,EAAQU,GACRhD,EAAMiD,UAAU,0BAA4B,aA0C9C,yBAZF,IAaE/C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBuB,QAxCtB,WACnB,IAAIoB,EAAUX,EAAKa,oBACnBZ,EAAQU,GACRhD,EAAMiD,UAAU,0BAA4B,aAqC5C,yBACA/C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBuB,QAnCpB,WAErBU,EADc,IAEdtC,EAAMiD,UAAU,gBAAkB,aAgClC,cACA/C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBuB,QA9B1B,WACb,IAAIS,EAAOc,SAASC,eAAe,SACnCf,EAAKgB,SACLC,UAAUC,UAAUC,UAAUnB,EAAKK,OACnC1C,EAAMiD,UAAU,eAAiB,aA0BnC,cAGF/C,EAAAC,EAAAC,cAAA,OAAKC,UAAS,uBAAAC,OAAsC,UAAbN,EAAMkB,KAAe,OAAO,UACjEhB,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,SAAIiC,EAAKoB,MAAM,KAAKC,OAApB,cAAuCrB,EAAKqB,OAA5C,gBACAxD,EAAAC,EAAAC,cAAA,SAAI,KAAQiC,EAAKoB,MAAM,KAAKC,OAA5B,iBACAxD,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIiC,EAAKqB,OAAO,EAAIrB,EAAO,8DC6ClBsB,MA7Ff,WAAe,IAAA3B,EAGYC,mBAAS,SAHrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGNd,EAHMgB,EAAA,GAGC0B,EAHD1B,EAAA,GAAA2B,EAIc5B,mBAAS,MAJvB6B,EAAA3B,OAAAC,EAAA,EAAAD,CAAA0B,EAAA,GAIN5D,EAJM6D,EAAA,GAIEC,EAJFD,EAAA,GAAAE,EAKmB/B,mBAAS,SAL5BgC,EAAA9B,OAAAC,EAAA,EAAAD,CAAA6B,EAAA,GAKNE,EALMD,EAAA,GAKKE,EALLF,EAAA,GAOPhB,EAAU,SAACmB,EAAU7D,GACzBwD,EAAS,CACP/C,IAAMoD,EACN7D,KAAOA,IAET8D,WAAW,WACTN,EAAS,OACR,OAGClC,EAAW,WACH,UAATX,GACD0C,EAAQ,QACRT,SAASmB,KAAKxB,MAAMC,gBAAkB,UACtCE,EAAU,6BAA8B,WACxCE,SAAS/B,MAAO,2BAUhBwC,EAAQ,SACRT,SAASmB,KAAKxB,MAAMC,gBAAiB,QACrCE,EAAU,8BAA+B,WACzCE,SAAS/B,MAAO,4BAkBpB,OAkBElB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoC,SAAA,KACArC,EAAAC,EAAAC,cAACa,EAAD,CAAQG,MAAM,YAAYmD,UAAU,QAAQrD,KAAOA,EAAMW,WAAYA,IACrE3B,EAAAC,EAAAC,cAACL,EAAD,CAAOE,MAASA,EAAOgD,UAAYA,IACjC/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACPH,EAAAC,EAAAC,cAAC2B,EAAD,CAAUS,QAAU,kBAAkBtB,KAAOA,EAAMgD,SAAUA,EAAUrC,WAAYA,EAAY2C,eApCtF,WACnBrB,SAASmB,KAAKxB,MAAMC,gBAAkB,MACtB,UAAbmB,GACDC,EAAY,QACZlB,EAAU,6BAA8B,aAGxCkB,EAAY,SACZhB,SAASmB,KAAKxB,MAAMC,gBAAiB,QACrCE,EAAU,8BAA+B,WACzCE,SAAS/B,MAAO,4BA0BuH6B,UAAWA,OC/EzIwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWpC,SAASC,eAAe,SACpDoC,OACHtF,EAAAC,EAAAC,cAACF,EAAAC,EAAMsF,WAAP,KACEvF,EAAAC,EAAAC,cAACsF,EAAD,QAOJjB","file":"static/js/main.1a4a3c79.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  \r\n  const capitalize=(word)=>{                 // The purpose of this fuction is to make in 'success' word S is capital i.e. 'Success'  \r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  \r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">   {/*props.alert && isliye likha taki props.alert ye to null hai initially to usko iss condition se resolve karnge (this is happen because all JSX will be converted into Javscript calls)*/}\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n    </div>\r\n  )\r\n}\r\n","// rfc : is the shortcut htmlFor below React Fuction based Component\r\n// impt : import PropTypes form 'prop-typs'\r\n\r\n// import {Link} from 'react-router-dom'  // Hamne Link import kiya kiv ki ye react router ka part hai ab jaha jaha <a><a/> ka tag hai vaha a=Link and href=to se replace karna hai taki us page par ham ja sake\r\nimport PropTypes from 'prop-types'\r\n\r\nimport React from 'react'\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid \">\r\n          {/* <Link className=\"navbar-brand\" to= \"/\">\r\n            {props.title}\r\n          </Link> */}\r\n          <a className=\"navbar-brand\" href= \"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"/navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to= \"/\">\r\n                  Home\r\n                </Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href= \"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to= \"/about\">\r\n                  {props.aboutText}\r\n                </Link> */}\r\n                {/* <a className=\"nav-link\" href= \"/about\">\r\n                  {props.aboutText}\r\n                </a> */}\r\n              </li>\r\n              {/* <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  href= \"/\"\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-bs-toggle=\"dropdown\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Dropdown\r\n                </a>\r\n                <ul className=\"dropdown-menu \" aria-labelledby=\"navbarDropdown\">\r\n                  <li>\r\n                    <a className=\"dropdown-item \" href= \"/\">\r\n                      Action\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href= \"/\">\r\n                      Another action\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <hr className=\"dropdown-divider\" />\r\n                  </li>\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href= \"/\">\r\n                      Something else here\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link disabled\">Disabled</a>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          </div>\r\n          <div className={`form-check form-switch mx-1 text-${props.mode ==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable {props.mode==='light'?'dark':'light'} Mode</label>\r\n          </div>\r\n            \r\n            {/* TODO: make and fix this multicolor Theme*/}\r\n\r\n          {/* <div className={`form-check form-switch mx-1 text-${props.mode ==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Enable {props.mode==='light'?'dark':'light'} Mode</label>\r\n          </div>\r\n          <div className={`form-check form-switch mx-1 text-${props.mode ==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick= {props.toggleGreyMode} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Grey</label>\r\n          </div>\r\n          <div className={`form-check form-switch mx-1 text-${props.mode ==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick= {props.toggleGreyMode}  type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio3\" value=\"option3\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio3\">Neavy</label>\r\n          </div> */}\r\n\r\n        </div>\r\n      </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired\r\n}\r\n","// Hooks : bina class ko use kiye class ke feature ko ham use kar sakte hai using Hooks(variable ko update ham normal method se nani kar sakte to state ka use karte hai)\r\n// search on google \"react hooks\" documentation me hooks ka ye syntax mil jayega (useState is a Hooks)\r\n\r\nimport React, {useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"clicked\");\r\n        // setText(\"You have clicked on handleUpClick\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\" , \"success\");\r\n    }\r\n\r\n    const handleLowClick=()=>{\r\n      let newText = text.toLocaleLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to LowerCase!\" , \"success\");\r\n    }\r\n\r\n    const handleClearClick=()=>{\r\n      let newText = '';\r\n      setText(newText);\r\n      props.showAlert(\"Text Cleared!\" , \"success\");\r\n    }\r\n\r\n    const handleCopy=()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copied!\" , \"success\");\r\n    }\r\n\r\n    const handleOnChange= (event)=>{\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    const [text, setText] = useState(\" \");   // Ye syntax 'text' ko useState vale fuction ki string assign karta hai badme ham setText fuction ka use karke use update kar sakte hai\r\n  return (\r\n    <>\r\n    <div>\r\n      <div className={`mb-3 text-${props.mode==='light'?'dark':'light'}`}>\r\n        <h1>{props.heading}</h1>\r\n        <textarea\r\n          className={`form-control text-${props.mode==='light'?'dark':'light'}`}\r\n          id=\"myBox\"\r\n          rows=\"8\"\r\n          value = {text}\r\n          onChange = {handleOnChange}  // ye isliye use kiya taki ham textarea me our likh paye our vo update ho paye\r\n          style={{backgroundColor: props.mode==='dark'?'#121212':'white'}}\r\n          ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Upper-Case</button> {/* must use onClick event listnear for when we click on button it run's the fuction handleUpclick */}\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>Convert to Lower-Case</button> \r\n      <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n    </div>\r\n\r\n    <div className={`container my-4 text-${props.mode==='light'?'dark':'light'}`}>\r\n      <h2>Your text Summmary</h2>\r\n      <p>{text.split(\" \").length} words and {text.length} Character's</p>\r\n      <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0 ? text : \"Enter the text in the above text area to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","// import { keyboard } from \"@testing-library/user-event/dist/keyboard\";\nimport { useState } from \"react\";\nimport \"./App.css\";\n// import About from \"./About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React from \"react\";\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n//   // Link,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  \n  // const inlineRadio2 = document.getElementById('inlineRadio2');\n  const [mode , setMode] = useState('light');\n  const [alert , setAlert] = useState(null);\n  const [greyMode , setGreyMode] =useState('light');\n\n  const showAlert=(message , type)=>{\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode=()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#121212';\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n      document.title ='TextTutils - Dark Mode'\n      \n      // setInterval(() =>{\n      //   document.title = 'TextTutils - Join the MemberShip'\n      // }, 2000)\n      // setInterval(()=>{\n      //   document.title = 'TextTutils - download TextTutils'\n      // }, 1500)\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor ='white';\n      showAlert(\"Light mode has been Enabled\", \"success\");\n      document.title ='TextTutils - Light Mode';\n    }\n  }\n\n  const toggleGreyMode=()=>{\n    document.body.style.backgroundColor = 'red';\n    if(greyMode === 'light'){\n      setGreyMode('dark');\n      showAlert(\"Dark mode has been Enabled\", \"success\"); \n    }\n    else{\n      setGreyMode('light');\n      document.body.style.backgroundColor ='white';\n      showAlert(\"Light mode has been Enabled\", \"success\");\n      document.title ='TextTutils - Light Mode';\n    }\n  }\n\n  return (\n    // <div classNameName=\"App\">\n    //   <header classNameName=\"App-header\">\n    //     <img src={logo} classNameName=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       classNameName=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React with Prajwal\n    //     </a>\n    //   </header>\n    // </div>\n\n    <>\n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode ={mode} toggleMode={toggleMode}/>\n    <Alert alert = {alert} showAlert ={showAlert}/>\n      <div className=\"container my-4\">\n              <TextForm heading = \"Enter Text Here\" mode ={mode} greyMode={greyMode} toggleMode={toggleMode} toggleGreyMode={toggleGreyMode} showAlert={showAlert}/>\n              {/* <About /> */}\n      </div>\n\n    {/* <BrowserRouter>\n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode ={mode} toggleMode={toggleMode}/>\n    <Alert alert = {alert} showAlert ={showAlert}/>\n      <div className=\"container my-4\">\n      <Routes>\n        <Route path=\"/\" element={<TextForm heading = \"Enter Text Here\" mode ={mode} greyMode={greyMode} toggleMode={toggleMode} toggleGreyMode={toggleGreyMode} showAlert={showAlert}/>} />\n        <Route path=\"about/*\" element={<About />} />\n      </Routes>\n      </div>\n    </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}