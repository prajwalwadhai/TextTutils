{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","mystyle","color","mode","backgroundColor","react_default","a","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Alert","height","alert","concat","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","href","title","aria-label","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","rows","value","onChange","event","target","disabled","length","newText","showAlert","toLocaleLowerCase","navigator","clipboard","writeText","split","filter","element","Footer","class","App","setMode","_useState3","_useState4","setAlert","_useState5","_useState6","message","setTimeout","document","body","aboutText","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.7112f0f3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About(props) {\r\n  \r\n  let mystyle ={\r\n    color : props.mode === 'dark'?'white':'black',\r\n    backgroundColor : props.mode === 'dark'?'#121212':'white',\r\n    // border:'1px solid',\r\n    // borderColor:'white'\r\n  }\r\n  \r\n  \r\n  // ****** This is for dark mode button inside the about section which is not use when dark mode is present in navbar section ******\r\n  // const [mystyle, setMyStyle] = useState({\r\n  //   color: \"black\",\r\n  //   backgroundColor: \"white\",\r\n  // });\r\n\r\n\r\n  // const [btnText , setBtnText] = useState(\"Enable Dark Mode\");\r\n  // const toggleStyle = () => {\r\n  //   if (mystyle.color === \"black\") {\r\n  //     setMyStyle({\r\n  //       color: \"white\",\r\n  //       backgroundColor: \"black\",\r\n  //       // border : '1px solid red'\r\n  //     });\r\n  //     setBtnText(\"Enable Light Mode\");\r\n  //   }\r\n  //   else {\r\n  //     setMyStyle({\r\n  //       color: \"black\",\r\n  //       backgroundColor: \"white\",\r\n  //     });\r\n  //     setBtnText(\"Enable Dark Mode\");\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <div className=\"container my-5\" style={{color : props.mode === 'dark'?'white':'black'}}>\r\n    {/* make sho */}\r\n      <h1 className=\"my-2\">About Us</h1>\r\n      <div\r\n        className=\"accordion accordion-flush\"\r\n        id=\"accordionFlushExample\"\r\n      >\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"flush-headingOne\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#flush-collapseOne\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"flush-collapseOne\"\r\n              style={mystyle}\r\n            >\r\n              TextUtils extension\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"flush-collapseOne\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"flush-headingOne\"\r\n            data-bs-parent=\"#accordionFlushExample\"\r\n            style={mystyle}\r\n          >\r\n            <div className=\"accordion-body\">\r\n            TextUtils extension will allow you to quickly perform such functions as:\r\n            Reverse a text to read from end to start\r\n            Title Case sentence\r\n            Format number for thousand separator and to include decimal points. This will also use proper country-based formatting!\r\n            Compare 2 strings to find if they are equal  can also ignore case\r\n            Perform search using Regular Expression Search on Steroid :o\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"flush-headingTwo\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#flush-collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"flush-collapseTwo\"\r\n              style={mystyle}\r\n            >\r\n              TextUtils Fuctions\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"flush-collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"flush-headingTwo\"\r\n            data-bs-parent=\"#accordionFlushExample\"\r\n            style={mystyle}\r\n          >\r\n            <div className=\"accordion-body\">\r\n            Accessibility is all about making websites more usable for everyone, and especially for people with disabilities like visual or audible impairments, sicknesses, or situational disabilities. Its a broad term with even broader guidelines, but one of the ways you can make your site more accessible is by optimizing the alt text on your images.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\" id=\"flush-headingThree\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#flush-collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"flush-collapseThree\"\r\n              style={mystyle}\r\n            >\r\n              TextUtils Blogs\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"flush-collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            aria-labelledby=\"flush-headingThree\"\r\n            data-bs-parent=\"#accordionFlushExample\"\r\n            style={mystyle}\r\n          >\r\n            <div className=\"accordion-body\">\r\n             Hossein Amerkashi posted: “TextUtils extension will allow you to quickly  perform such functions as: Reverse a text to read from end to start Title  Case sentence Format number for thousand separator and to include decimal  points Compare 2 strings to find if they are equal can” \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"container my-3\">\r\n        <button type=\"button\" className=\"btn btn-primary\" onClick={toggleStyle}>\r\n          {btnText}\r\n        </button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n  ","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  \r\n  const capitalize=(word)=>{                 // The purpose of this fuction is to make in 'success' word S is capital i.e. 'Success'  \r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  \r\n  return (\r\n    <div style={{height:'40px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">   {/*props.alert && isliye likha taki props.alert ye to null hai initially to usko iss condition se resolve karnge (this is happen because all JSX will be converted into Javscript calls)*/}\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n","// rfc : is the shortcut htmlFor below React Fuction based Component\r\n// impt : import PropTypes form 'prop-typs'\r\n\r\n// import {Link} from 'react-router-dom'  // Hamne Link import kiya kiv ki ye react router ka part hai ab jaha jaha <a><a/> ka tag hai vaha a=Link and href=to se replace karna hai taki us page par ham ja sake\r\nimport PropTypes from 'prop-types'\r\n\r\nimport React from 'react'\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid \">\r\n          {/* <Link className=\"navbar-brand\" to= \"/\">\r\n            {props.title}\r\n          </Link> */}\r\n          <a className=\"navbar-brand\" href= \"/\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"/navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to= \"/\">\r\n                  Home\r\n                </Link> */}\r\n                <a className=\"nav-link\" aria-current=\"page\" href= \"/\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to= \"/about\">\r\n                  {props.aboutText}\r\n                </Link> */}\r\n                {/* <a className=\"nav-link\" href= \"/about\">\r\n                  {props.aboutText}\r\n                </a> */}\r\n              </li>\r\n              {/* <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className=\"nav-link dropdown-toggle\"\r\n                  href= \"/\"\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-bs-toggle=\"dropdown\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Dropdown\r\n                </a>\r\n                <ul className=\"dropdown-menu \" aria-labelledby=\"navbarDropdown\">\r\n                  <li>\r\n                    <a className=\"dropdown-item \" href= \"/\">\r\n                      Action\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href= \"/\">\r\n                      Another action\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    <hr className=\"dropdown-divider\" />\r\n                  </li>\r\n                  <li>\r\n                    <a className=\"dropdown-item\" href= \"/\">\r\n                      Something else here\r\n                    </a>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link disabled\">Disabled</a>\r\n              </li> */}\r\n            </ul>\r\n            {/* <form className=\"d-flex\" role=\"search\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n          </div>\r\n          <div className={`form-check form-switch mx-1 text-${props.mode ==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable {props.mode==='light'?'dark':'light'} Mode</label>\r\n          </div>\r\n            \r\n            {/* TODO: make and fix this multicolor Theme*/}\r\n\r\n          {/* <div className={`form-check form-switch mx-1 text-${props.mode ==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick= {props.toggleMode} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio1\">Enable {props.mode==='light'?'dark':'light'} Mode</label>\r\n          </div>\r\n          <div className={`form-check form-switch mx-1 text-${props.mode ==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick= {props.toggleGreyMode} type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio2\">Grey</label>\r\n          </div>\r\n          <div className={`form-check form-switch mx-1 text-${props.mode ==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick= {props.toggleGreyMode}  type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio3\" value=\"option3\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"inlineRadio3\">Neavy</label>\r\n          </div> */}\r\n\r\n        </div>\r\n      </nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired\r\n}\r\n","// Hooks : bina className ko use kiye className ke feature ko ham use kar sakte hai using Hooks(variable ko update ham normal method se nani kar sakte to state ka use karte hai)\r\n// search on google \"react hooks\" documentation me hooks ka ye syntax mil jayega (useState is a Hooks)\r\n\r\nimport React, {useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"clicked\");\r\n        // setText(\"You have clicked on handleUpClick\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\" , \"success\");\r\n    }\r\n\r\n    const handleLowClick=()=>{\r\n      let newText = text.toLocaleLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to LowerCase!\" , \"success\");\r\n    }\r\n\r\n    const handleClearClick=()=>{\r\n      let newText = '';\r\n      setText(newText);\r\n      props.showAlert(\"Text Cleared!\" , \"success\");\r\n    }\r\n\r\n    const handleCopy=()=>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text Copied!\" , \"success\");\r\n    }\r\n\r\n    const handleOnChange= (event)=>{\r\n        // console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    const [text, setText] = useState(\" \");   // Ye syntax 'text' ko useState vale fuction ki string assign karta hai badme ham setText fuction ka use karke use update kar sakte hai\r\n  return (\r\n    <>\r\n    <div>\r\n      <div className={`mb-3 text-${props.mode==='light'?'dark':'light'}`}>\r\n        <h1>{props.heading}</h1>\r\n        <textarea\r\n          className={`form-control text-${props.mode==='light'?'dark':'light'}`}\r\n          id=\"myBox\"\r\n          rows=\"8\"\r\n          value = {text}\r\n          onChange = {handleOnChange}  // ye isliye use kiya taki ham textarea me our likh paye our vo update ho paye\r\n          style={{backgroundColor: props.mode==='dark'?'#121212':'white'}}\r\n          ></textarea>\r\n      </div>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-2\" onClick={handleUpClick}>Convert to Upper-Case</button> {/* must use onClick event listnear for when we click on button it run's the fuction handleUpclick */}\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-2\" onClick={handleLowClick}>Convert to Lower-Case</button> \r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-2\" onClick={handleClearClick}>Clear Text</button>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-2\" onClick={handleCopy}>Copy Text</button>\r\n    </div>\r\n\r\n    <div className={`container my-4 text-${props.mode==='light'?'dark':'light'}`}>\r\n      <h2>Your text Summmary</h2>\r\n      <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} Character's</p>\r\n      <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes Read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length>0 ? text : \"Nothing to preview\"}</p>\r\n    </div>\r\n\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Footer(props) {\r\n  return (\r\n    <div class=\"container\">\r\n            <footer class=\"d-flex flex-wrap justify-content-between align-items-center py-3 my-4 border-top\">\r\n                <p class={`col-md-4 mb-0 text-${props.mode ==='dark'?'white':'black'}`}>© 2022 Company, Inc</p>\r\n\r\n                {/* <a href=\"/\" class=\"col-md-4 d-flex align-items-center justify-content-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                <svg class=\"bi me-2\" width=\"40\" height=\"32\"><use xlink:href=\"#bootstrap\"></use></svg>\r\n                </a> */}\r\n\r\n                <ul class=\"nav col-md-4 justify-content-end\">\r\n                <li class=\"nav-item\"><a href=\"/\" class={`nav-link px-2 text-${props.mode ==='dark'?'white':'black'}`}>Home</a></li>\r\n                <li class=\"nav-item\"><a href=\"/\" class={`nav-link px-2 text-${props.mode ==='dark'?'white':'black'}`}>Features</a></li>\r\n                <li class=\"nav-item\"><a href=\"/\" class={`nav-link px-2 text-${props.mode ==='dark'?'white':'black'}`}>Pricing</a></li>\r\n                <li class=\"nav-item\"><a href=\"/\" class={`nav-link px-2 text-${props.mode ==='dark'?'white':'black'}`}>FAQs</a></li>\r\n                <li class=\"nav-item\"><a href=\"/\" class={`nav-link px-2 text-${props.mode ==='dark'?'white':'black'}`}>About</a></li>\r\n                </ul>\r\n            </footer>\r\n    </div>\r\n  )\r\n}\r\n","// import { keyboard } from \"@testing-library/user-event/dist/keyboard\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Footer from \"./components/Footer\";\nimport React from \"react\";\n// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n//   // Link,\n// } from \"react-router-dom\";\n\nfunction App() {\n  \n  // const inlineRadio2 = document.getElementById('inlineRadio2');\n  const [mode , setMode] = useState('light');\n  const [alert , setAlert] = useState(null);\n  const [greyMode , setGreyMode] =useState('light');\n\n  const showAlert=(message , type)=>{\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode=()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#121212';\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n      document.title ='TextTutils - Dark Mode'\n      \n      // setInterval(() =>{\n      //   document.title = 'TextTutils - Join the MemberShip'\n      // }, 2000)\n      // setInterval(()=>{\n      //   document.title = 'TextTutils - download TextTutils'\n      // }, 1500)\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor ='white';\n      showAlert(\"Light mode has been Enabled\", \"success\");\n      document.title ='TextTutils - Light Mode';\n    }\n  }\n\n  // const toggleGreyMode=()=>{\n  //   document.body.style.backgroundColor = 'red';\n  //   if(greyMode === 'light'){\n  //     setGreyMode('dark');\n  //     showAlert(\"Dark mode has been Enabled\", \"success\"); \n  //   }\n  //   else{\n  //     setGreyMode('light');\n  //     document.body.style.backgroundColor ='white';\n  //     showAlert(\"Light mode has been Enabled\", \"success\");\n  //     document.title ='TextTutils - Light Mode';\n  //   }\n  // }\n\n  return (\n    // <div classNameName=\"App\">\n    //   <header classNameName=\"App-header\">\n    //     <img src={logo} classNameName=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       classNameName=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React with Prajwal\n    //     </a>\n    //   </header>\n    // </div>\n\n    <>\n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode ={mode} toggleMode={toggleMode}/>\n    <Alert alert = {alert} showAlert ={showAlert}/>\n      <div className=\"container my-4\">\n              <TextForm heading = \"Enter Text Here\" mode ={mode}  toggleMode={toggleMode} showAlert={showAlert}/>\n              <About mode ={mode}/>\n              <Footer mode ={mode} toggleMode={toggleMode}/>\n      </div>\n\n    {/* <BrowserRouter>\n      <Navbar title=\"TextUtils\" aboutText=\"About\" mode ={mode} toggleMode={toggleMode}/>\n      <Alert alert = {alert} showAlert ={showAlert}/>\n      <div className=\"container my-4\">\n              <Routes>\n                  <Route path=\"/\" element={<TextForm heading = \"Enter Text Here\" mode ={mode} greyMode={greyMode} toggleMode={toggleMode} toggleGreyMode={toggleGreyMode} showAlert={showAlert}/>} />\n                  <Route path=\"about/*\" element={<About />} />\n              </Routes>\n      <Footer mode ={mode} toggleMode={toggleMode}/>\n      </div>\n    </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}